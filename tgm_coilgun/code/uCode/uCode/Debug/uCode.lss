
uCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000392  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800060  00800060  00000406  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f8  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e5  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000134  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bc  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000229  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__vector_1>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__vector_2>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	7e c0       	rjmp	.+252    	; 0x10e <__vector_8>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	98 c0       	rjmp	.+304    	; 0x158 <__vector_19>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a8 37       	cpi	r26, 0x78	; 120
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	3a d1       	rcall	.+628    	; 0x2bc <main>
  48:	a2 c1       	rjmp	.+836    	; 0x38e <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <__vector_1>:
char usart_bytecount = 0;	//position of transmission for 32 bit integers


//bullet speed interrupts

ISR(INT0_vect) {		//lower light barrier triggered
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
	TCCR1B = 1;		//start timer
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	8e bd       	out	0x2e, r24	; 46
	return;
}
  5c:	8f 91       	pop	r24
  5e:	0f 90       	pop	r0
  60:	0f be       	out	0x3f, r0	; 63
  62:	0f 90       	pop	r0
  64:	1f 90       	pop	r1
  66:	18 95       	reti

00000068 <__vector_2>:

ISR(INT1_vect) {		//upper light barrier triggered
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
  72:	2f 93       	push	r18
  74:	3f 93       	push	r19
  76:	4f 93       	push	r20
  78:	5f 93       	push	r21
  7a:	6f 93       	push	r22
  7c:	7f 93       	push	r23
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
  82:	af 93       	push	r26
  84:	bf 93       	push	r27
  86:	ef 93       	push	r30
  88:	ff 93       	push	r31
	TCCR1B = 0;		//stop timer 1 and save value
  8a:	1e bc       	out	0x2e, r1	; 46
	bullet_time = 4096 * ovf_count_t1 * 1000 + TCNT1 * 625 / 10;	//1 ovf = 4096us, 100 tics = 6.35us => 1 tic = 63.5ns --- that whole shit is in nanoseconds, with a 32 bit integer, unsigned, that should be enough
  8c:	4c b5       	in	r20, 0x2c	; 44
  8e:	5d b5       	in	r21, 0x2d	; 45
  90:	81 e7       	ldi	r24, 0x71	; 113
  92:	92 e0       	ldi	r25, 0x02	; 2
  94:	48 9f       	mul	r20, r24
  96:	90 01       	movw	r18, r0
  98:	49 9f       	mul	r20, r25
  9a:	30 0d       	add	r19, r0
  9c:	58 9f       	mul	r21, r24
  9e:	30 0d       	add	r19, r0
  a0:	11 24       	eor	r1, r1
  a2:	ad ec       	ldi	r26, 0xCD	; 205
  a4:	bc ec       	ldi	r27, 0xCC	; 204
  a6:	5d d1       	rcall	.+698    	; 0x362 <__umulhisi3>
  a8:	fc 01       	movw	r30, r24
  aa:	f6 95       	lsr	r31
  ac:	e7 95       	ror	r30
  ae:	f6 95       	lsr	r31
  b0:	e7 95       	ror	r30
  b2:	f6 95       	lsr	r31
  b4:	e7 95       	ror	r30
  b6:	20 91 64 00 	lds	r18, 0x0064
  ba:	30 91 65 00 	lds	r19, 0x0065
  be:	40 91 66 00 	lds	r20, 0x0066
  c2:	50 91 67 00 	lds	r21, 0x0067
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	70 e8       	ldi	r23, 0x80	; 128
  ca:	8e e3       	ldi	r24, 0x3E	; 62
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	3a d1       	rcall	.+628    	; 0x344 <__mulsi3>
  d0:	dc 01       	movw	r26, r24
  d2:	cb 01       	movw	r24, r22
  d4:	8e 0f       	add	r24, r30
  d6:	9f 1f       	adc	r25, r31
  d8:	a1 1d       	adc	r26, r1
  da:	b1 1d       	adc	r27, r1
  dc:	80 93 60 00 	sts	0x0060, r24
  e0:	90 93 61 00 	sts	0x0061, r25
  e4:	a0 93 62 00 	sts	0x0062, r26
  e8:	b0 93 63 00 	sts	0x0063, r27
	return;
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_8>:

ISR(TIMER1_OVF_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
	ovf_count_t1++;
 120:	80 91 64 00 	lds	r24, 0x0064
 124:	90 91 65 00 	lds	r25, 0x0065
 128:	a0 91 66 00 	lds	r26, 0x0066
 12c:	b0 91 67 00 	lds	r27, 0x0067
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	a1 1d       	adc	r26, r1
 134:	b1 1d       	adc	r27, r1
 136:	80 93 64 00 	sts	0x0064, r24
 13a:	90 93 65 00 	sts	0x0065, r25
 13e:	a0 93 66 00 	sts	0x0066, r26
 142:	b0 93 67 00 	sts	0x0067, r27
}
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_19>:

//coi timing interrupts

ISR(TIMER0_COMP_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
	if(ovf_count_t0 * 10 <= time[1]) {
 172:	80 91 68 00 	lds	r24, 0x0068
 176:	90 91 69 00 	lds	r25, 0x0069
 17a:	a0 91 6a 00 	lds	r26, 0x006A
 17e:	b0 91 6b 00 	lds	r27, 0x006B
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	aa 1f       	adc	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	ac 01       	movw	r20, r24
 18c:	bd 01       	movw	r22, r26
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	66 1f       	adc	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	66 1f       	adc	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	84 0f       	add	r24, r20
 1a0:	95 1f       	adc	r25, r21
 1a2:	a6 1f       	adc	r26, r22
 1a4:	b7 1f       	adc	r27, r23
 1a6:	40 91 70 00 	lds	r20, 0x0070
 1aa:	50 91 71 00 	lds	r21, 0x0071
 1ae:	60 91 72 00 	lds	r22, 0x0072
 1b2:	70 91 73 00 	lds	r23, 0x0073
 1b6:	48 17       	cp	r20, r24
 1b8:	59 07       	cpc	r21, r25
 1ba:	6a 07       	cpc	r22, r26
 1bc:	7b 07       	cpc	r23, r27
 1be:	10 f0       	brcs	.+4      	; 0x1c4 <__vector_19+0x6c>
		PORTB &= ~(0<<PORTB0);
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	88 bb       	out	0x18, r24	; 24
	}
	if(ovf_count_t0 * 10 <= time[2]) {
 1c4:	80 91 68 00 	lds	r24, 0x0068
 1c8:	90 91 69 00 	lds	r25, 0x0069
 1cc:	a0 91 6a 00 	lds	r26, 0x006A
 1d0:	b0 91 6b 00 	lds	r27, 0x006B
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	aa 1f       	adc	r26, r26
 1da:	bb 1f       	adc	r27, r27
 1dc:	ac 01       	movw	r20, r24
 1de:	bd 01       	movw	r22, r26
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	66 1f       	adc	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	66 1f       	adc	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	84 0f       	add	r24, r20
 1f2:	95 1f       	adc	r25, r21
 1f4:	a6 1f       	adc	r26, r22
 1f6:	b7 1f       	adc	r27, r23
 1f8:	40 91 74 00 	lds	r20, 0x0074
 1fc:	50 91 75 00 	lds	r21, 0x0075
 200:	60 91 76 00 	lds	r22, 0x0076
 204:	70 91 77 00 	lds	r23, 0x0077
 208:	48 17       	cp	r20, r24
 20a:	59 07       	cpc	r21, r25
 20c:	6a 07       	cpc	r22, r26
 20e:	7b 07       	cpc	r23, r27
 210:	10 f0       	brcs	.+4      	; 0x216 <__vector_19+0xbe>
		PORTB &= ~(0<<PORTB1);
 212:	88 b3       	in	r24, 0x18	; 24
 214:	88 bb       	out	0x18, r24	; 24
	}
	if(ovf_count_t0 * 10 <= time[3]) {
 216:	80 91 68 00 	lds	r24, 0x0068
 21a:	90 91 69 00 	lds	r25, 0x0069
 21e:	a0 91 6a 00 	lds	r26, 0x006A
 222:	b0 91 6b 00 	lds	r27, 0x006B
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	ac 01       	movw	r20, r24
 230:	bd 01       	movw	r22, r26
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	66 1f       	adc	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	66 1f       	adc	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	84 0f       	add	r24, r20
 244:	95 1f       	adc	r25, r21
 246:	a6 1f       	adc	r26, r22
 248:	b7 1f       	adc	r27, r23
 24a:	40 91 78 00 	lds	r20, 0x0078
 24e:	50 91 79 00 	lds	r21, 0x0079
 252:	60 91 7a 00 	lds	r22, 0x007A
 256:	70 91 7b 00 	lds	r23, 0x007B
 25a:	48 17       	cp	r20, r24
 25c:	59 07       	cpc	r21, r25
 25e:	6a 07       	cpc	r22, r26
 260:	7b 07       	cpc	r23, r27
 262:	28 f0       	brcs	.+10     	; 0x26e <__stack+0xf>
		PORTB &= ~(0<<PORTB1);
 264:	88 b3       	in	r24, 0x18	; 24
 266:	88 bb       	out	0x18, r24	; 24
		TCCR0 &= ~(1<<CS00||1<<CS01||1<<CS02);		//stop timer 0
 268:	83 b7       	in	r24, 0x33	; 51
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	83 bf       	out	0x33, r24	; 51
	}
	ovf_count_t0++;
 26e:	80 91 68 00 	lds	r24, 0x0068
 272:	90 91 69 00 	lds	r25, 0x0069
 276:	a0 91 6a 00 	lds	r26, 0x006A
 27a:	b0 91 6b 00 	lds	r27, 0x006B
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	a1 1d       	adc	r26, r1
 282:	b1 1d       	adc	r27, r1
 284:	80 93 68 00 	sts	0x0068, r24
 288:	90 93 69 00 	sts	0x0069, r25
 28c:	a0 93 6a 00 	sts	0x006A, r26
 290:	b0 93 6b 00 	sts	0x006B, r27
	return;
}
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <USART_Init>:

void USART_Init() {
	UBRRL = 0x67;
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	89 b9       	out	0x09, r24	; 9
	UCSRC = 0x06;
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0x18;
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	8a b9       	out	0x0a, r24	; 10
 2ba:	08 95       	ret

000002bc <main>:
}

int main(void) {
	
	//setup timers
	OCR0 = 160;
 2bc:	80 ea       	ldi	r24, 0xA0	; 160
 2be:	8c bf       	out	0x3c, r24	; 60
	OCR1A = 1600;
 2c0:	80 e4       	ldi	r24, 0x40	; 64
 2c2:	96 e0       	ldi	r25, 0x06	; 6
 2c4:	9b bd       	out	0x2b, r25	; 43
 2c6:	8a bd       	out	0x2a, r24	; 42
	
	//setup USART
	DDRA = 0x00;
 2c8:	1a ba       	out	0x1a, r1	; 26
	DDRA |= (1<<PD0)|(1<<PD1);
 2ca:	8a b3       	in	r24, 0x1a	; 26
 2cc:	83 60       	ori	r24, 0x03	; 3
 2ce:	8a bb       	out	0x1a, r24	; 26
	USART_Init();
 2d0:	ee df       	rcall	.-36     	; 0x2ae <USART_Init>
 2d2:	ec e6       	ldi	r30, 0x6C	; 108
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	48 e7       	ldi	r20, 0x78	; 120
 2d8:	50 e0       	ldi	r21, 0x00	; 0
	UBRRL = 0x67;
	UCSRC = 0x06;
	UCSRB = 0x18;
}

int main(void) {
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	23 c0       	rjmp	.+70     	; 0x326 <main+0x6a>
	USART_Init();
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
		for(int j = 0; j < 4; j++) {
			while(!(UCSRA & (1<<RXC)));
 2e0:	5f 9b       	sbis	0x0b, 7	; 11
 2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <main+0x24>
			time[i] |= (UDR<<(8*j));
 2e4:	8c b1       	in	r24, 0x0c	; 12
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <main+0x34>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <main+0x30>
 2f4:	aa 27       	eor	r26, r26
 2f6:	97 fd       	sbrc	r25, 7
 2f8:	a0 95       	com	r26
 2fa:	ba 2f       	mov	r27, r26
 2fc:	c0 80       	ld	r12, Z
 2fe:	d1 80       	ldd	r13, Z+1	; 0x01
 300:	e2 80       	ldd	r14, Z+2	; 0x02
 302:	f3 80       	ldd	r15, Z+3	; 0x03
 304:	8c 29       	or	r24, r12
 306:	9d 29       	or	r25, r13
 308:	ae 29       	or	r26, r14
 30a:	bf 29       	or	r27, r15
 30c:	80 83       	st	Z, r24
 30e:	91 83       	std	Z+1, r25	; 0x01
 310:	a2 83       	std	Z+2, r26	; 0x02
 312:	b3 83       	std	Z+3, r27	; 0x03
 314:	28 5f       	subi	r18, 0xF8	; 248
 316:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRA |= (1<<PD0)|(1<<PD1);
	USART_Init();
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
		for(int j = 0; j < 4; j++) {
 318:	20 32       	cpi	r18, 0x20	; 32
 31a:	31 05       	cpc	r19, r1
 31c:	09 f7       	brne	.-62     	; 0x2e0 <main+0x24>
 31e:	34 96       	adiw	r30, 0x04	; 4
	DDRA = 0x00;
	DDRA |= (1<<PD0)|(1<<PD1);
	USART_Init();
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
 320:	e4 17       	cp	r30, r20
 322:	f5 07       	cpc	r31, r21
 324:	19 f0       	breq	.+6      	; 0x32c <main+0x70>
	UBRRL = 0x67;
	UCSRC = 0x06;
	UCSRB = 0x18;
}

int main(void) {
 326:	27 2f       	mov	r18, r23
 328:	36 2f       	mov	r19, r22
 32a:	da cf       	rjmp	.-76     	; 0x2e0 <main+0x24>
		}
	}
	
	//start launch
	//activate timer 0
	TCCR0 = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);
 330:	89 b7       	in	r24, 0x39	; 57
 332:	82 60       	ori	r24, 0x02	; 2
 334:	89 bf       	out	0x39, r24	; 57
	
	//enable pin interrupts
	MCUCR |= 0x0F;
 336:	85 b7       	in	r24, 0x35	; 53
 338:	8f 60       	ori	r24, 0x0F	; 15
 33a:	85 bf       	out	0x35, r24	; 53
	
	//setup coil-pins
	DDRB = 0xFF;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 340:	18 ba       	out	0x18, r1	; 24
 342:	ff cf       	rjmp	.-2      	; 0x342 <main+0x86>

00000344 <__mulsi3>:
 344:	db 01       	movw	r26, r22
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	17 d0       	rcall	.+46     	; 0x37a <__muluhisi3>
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	a2 9f       	mul	r26, r18
 352:	80 0d       	add	r24, r0
 354:	91 1d       	adc	r25, r1
 356:	a3 9f       	mul	r26, r19
 358:	90 0d       	add	r25, r0
 35a:	b2 9f       	mul	r27, r18
 35c:	90 0d       	add	r25, r0
 35e:	11 24       	eor	r1, r1
 360:	08 95       	ret

00000362 <__umulhisi3>:
 362:	a2 9f       	mul	r26, r18
 364:	b0 01       	movw	r22, r0
 366:	b3 9f       	mul	r27, r19
 368:	c0 01       	movw	r24, r0
 36a:	a3 9f       	mul	r26, r19
 36c:	01 d0       	rcall	.+2      	; 0x370 <__umulhisi3+0xe>
 36e:	b2 9f       	mul	r27, r18
 370:	70 0d       	add	r23, r0
 372:	81 1d       	adc	r24, r1
 374:	11 24       	eor	r1, r1
 376:	91 1d       	adc	r25, r1
 378:	08 95       	ret

0000037a <__muluhisi3>:
 37a:	f3 df       	rcall	.-26     	; 0x362 <__umulhisi3>
 37c:	a5 9f       	mul	r26, r21
 37e:	90 0d       	add	r25, r0
 380:	b4 9f       	mul	r27, r20
 382:	90 0d       	add	r25, r0
 384:	a4 9f       	mul	r26, r20
 386:	80 0d       	add	r24, r0
 388:	91 1d       	adc	r25, r1
 38a:	11 24       	eor	r1, r1
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
