
uCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000019  00800060  00800060  0000047c  2**0
                  ALLOC
  2 .eeprom       00000004  00810000  00810000  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000227  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000135  00000000  00000000  0000071f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b2  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c1  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000219  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__vector_1>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__vector_2>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	81 c0       	rjmp	.+258    	; 0x114 <__vector_8>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	9b c0       	rjmp	.+310    	; 0x15e <__vector_19>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a9 37       	cpi	r26, 0x79	; 121
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	3d d1       	rcall	.+634    	; 0x2c2 <main>
  48:	cd c1       	rjmp	.+922    	; 0x3e4 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <__vector_1>:

uint32_t bullet_time = 0;		//var for bullet travel time
uint8_t dun = 0;
//bullet speed interrupts

ISR(INT0_vect) {		//lower light barrier triggered
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
	TCCR1B = 1;		//start timer
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	8e bd       	out	0x2e, r24	; 46
	return;
}
  5c:	8f 91       	pop	r24
  5e:	0f 90       	pop	r0
  60:	0f be       	out	0x3f, r0	; 63
  62:	0f 90       	pop	r0
  64:	1f 90       	pop	r1
  66:	18 95       	reti

00000068 <__vector_2>:

ISR(INT1_vect) {		//upper light barrier triggered
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
  72:	2f 93       	push	r18
  74:	3f 93       	push	r19
  76:	4f 93       	push	r20
  78:	5f 93       	push	r21
  7a:	6f 93       	push	r22
  7c:	7f 93       	push	r23
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
  82:	af 93       	push	r26
  84:	bf 93       	push	r27
  86:	ef 93       	push	r30
  88:	ff 93       	push	r31
	TCCR1B = 0;		//stop timer 1 and save value
  8a:	1e bc       	out	0x2e, r1	; 46
	bullet_time = 4096 * ovf_count_t1 * 1000 + TCNT1 * 625 / 10;	//1 ovf = 4096us, 100 tics = 6.35us => 1 tic = 63.5ns --- that whole shit is in nanoseconds, with a 32 bit integer, unsigned, that should be enough
  8c:	4c b5       	in	r20, 0x2c	; 44
  8e:	5d b5       	in	r21, 0x2d	; 45
  90:	81 e7       	ldi	r24, 0x71	; 113
  92:	92 e0       	ldi	r25, 0x02	; 2
  94:	48 9f       	mul	r20, r24
  96:	90 01       	movw	r18, r0
  98:	49 9f       	mul	r20, r25
  9a:	30 0d       	add	r19, r0
  9c:	58 9f       	mul	r21, r24
  9e:	30 0d       	add	r19, r0
  a0:	11 24       	eor	r1, r1
  a2:	ad ec       	ldi	r26, 0xCD	; 205
  a4:	bc ec       	ldi	r27, 0xCC	; 204
  a6:	73 d1       	rcall	.+742    	; 0x38e <__umulhisi3>
  a8:	fc 01       	movw	r30, r24
  aa:	f6 95       	lsr	r31
  ac:	e7 95       	ror	r30
  ae:	f6 95       	lsr	r31
  b0:	e7 95       	ror	r30
  b2:	f6 95       	lsr	r31
  b4:	e7 95       	ror	r30
  b6:	20 91 65 00 	lds	r18, 0x0065
  ba:	30 91 66 00 	lds	r19, 0x0066
  be:	40 91 67 00 	lds	r20, 0x0067
  c2:	50 91 68 00 	lds	r21, 0x0068
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	70 e8       	ldi	r23, 0x80	; 128
  ca:	8e e3       	ldi	r24, 0x3E	; 62
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	50 d1       	rcall	.+672    	; 0x370 <__mulsi3>
  d0:	dc 01       	movw	r26, r24
  d2:	cb 01       	movw	r24, r22
  d4:	8e 0f       	add	r24, r30
  d6:	9f 1f       	adc	r25, r31
  d8:	a1 1d       	adc	r26, r1
  da:	b1 1d       	adc	r27, r1
  dc:	80 93 61 00 	sts	0x0061, r24
  e0:	90 93 62 00 	sts	0x0062, r25
  e4:	a0 93 63 00 	sts	0x0063, r26
  e8:	b0 93 64 00 	sts	0x0064, r27
	dun = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 60 00 	sts	0x0060, r24
	return;
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_8>:

ISR(TIMER1_OVF_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
	ovf_count_t1++;
 126:	80 91 65 00 	lds	r24, 0x0065
 12a:	90 91 66 00 	lds	r25, 0x0066
 12e:	a0 91 67 00 	lds	r26, 0x0067
 132:	b0 91 68 00 	lds	r27, 0x0068
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	a1 1d       	adc	r26, r1
 13a:	b1 1d       	adc	r27, r1
 13c:	80 93 65 00 	sts	0x0065, r24
 140:	90 93 66 00 	sts	0x0066, r25
 144:	a0 93 67 00 	sts	0x0067, r26
 148:	b0 93 68 00 	sts	0x0068, r27
}
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_19>:

ISR(TIMER0_COMP_vect) {
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
	if(ovf_count_t0 * 10 <= time[1]) {
 178:	80 91 69 00 	lds	r24, 0x0069
 17c:	90 91 6a 00 	lds	r25, 0x006A
 180:	a0 91 6b 00 	lds	r26, 0x006B
 184:	b0 91 6c 00 	lds	r27, 0x006C
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	ac 01       	movw	r20, r24
 192:	bd 01       	movw	r22, r26
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	66 1f       	adc	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	66 1f       	adc	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	84 0f       	add	r24, r20
 1a6:	95 1f       	adc	r25, r21
 1a8:	a6 1f       	adc	r26, r22
 1aa:	b7 1f       	adc	r27, r23
 1ac:	40 91 71 00 	lds	r20, 0x0071
 1b0:	50 91 72 00 	lds	r21, 0x0072
 1b4:	60 91 73 00 	lds	r22, 0x0073
 1b8:	70 91 74 00 	lds	r23, 0x0074
 1bc:	48 17       	cp	r20, r24
 1be:	59 07       	cpc	r21, r25
 1c0:	6a 07       	cpc	r22, r26
 1c2:	7b 07       	cpc	r23, r27
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__vector_19+0x6c>
		PORTB &= ~(0<<PORTB0);
 1c6:	88 b3       	in	r24, 0x18	; 24
 1c8:	88 bb       	out	0x18, r24	; 24
	}
	if(ovf_count_t0 * 10 <= time[2]) {
 1ca:	80 91 69 00 	lds	r24, 0x0069
 1ce:	90 91 6a 00 	lds	r25, 0x006A
 1d2:	a0 91 6b 00 	lds	r26, 0x006B
 1d6:	b0 91 6c 00 	lds	r27, 0x006C
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	ac 01       	movw	r20, r24
 1e4:	bd 01       	movw	r22, r26
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	66 1f       	adc	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	66 1f       	adc	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	84 0f       	add	r24, r20
 1f8:	95 1f       	adc	r25, r21
 1fa:	a6 1f       	adc	r26, r22
 1fc:	b7 1f       	adc	r27, r23
 1fe:	40 91 75 00 	lds	r20, 0x0075
 202:	50 91 76 00 	lds	r21, 0x0076
 206:	60 91 77 00 	lds	r22, 0x0077
 20a:	70 91 78 00 	lds	r23, 0x0078
 20e:	48 17       	cp	r20, r24
 210:	59 07       	cpc	r21, r25
 212:	6a 07       	cpc	r22, r26
 214:	7b 07       	cpc	r23, r27
 216:	10 f0       	brcs	.+4      	; 0x21c <__vector_19+0xbe>
		PORTB &= ~(0<<PORTB1);
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	88 bb       	out	0x18, r24	; 24
	}
	if(ovf_count_t0 * 10 <= time[3]) {
 21c:	80 91 69 00 	lds	r24, 0x0069
 220:	90 91 6a 00 	lds	r25, 0x006A
 224:	a0 91 6b 00 	lds	r26, 0x006B
 228:	b0 91 6c 00 	lds	r27, 0x006C
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	aa 1f       	adc	r26, r26
 232:	bb 1f       	adc	r27, r27
 234:	ac 01       	movw	r20, r24
 236:	bd 01       	movw	r22, r26
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	66 1f       	adc	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	66 1f       	adc	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	84 0f       	add	r24, r20
 24a:	95 1f       	adc	r25, r21
 24c:	a6 1f       	adc	r26, r22
 24e:	b7 1f       	adc	r27, r23
 250:	40 91 79 00 	lds	r20, 0x0079
 254:	50 91 7a 00 	lds	r21, 0x007A
 258:	60 91 7b 00 	lds	r22, 0x007B
 25c:	70 91 7c 00 	lds	r23, 0x007C
 260:	48 17       	cp	r20, r24
 262:	59 07       	cpc	r21, r25
 264:	6a 07       	cpc	r22, r26
 266:	7b 07       	cpc	r23, r27
 268:	28 f0       	brcs	.+10     	; 0x274 <__stack+0x15>
		PORTB &= ~(0<<PORTB1);
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	88 bb       	out	0x18, r24	; 24
		TCCR0 &= ~(1<<CS00||1<<CS01||1<<CS02);		//stop timer 0
 26e:	83 b7       	in	r24, 0x33	; 51
 270:	8e 7f       	andi	r24, 0xFE	; 254
 272:	83 bf       	out	0x33, r24	; 51
	}
	ovf_count_t0++;
 274:	80 91 69 00 	lds	r24, 0x0069
 278:	90 91 6a 00 	lds	r25, 0x006A
 27c:	a0 91 6b 00 	lds	r26, 0x006B
 280:	b0 91 6c 00 	lds	r27, 0x006C
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	a1 1d       	adc	r26, r1
 288:	b1 1d       	adc	r27, r1
 28a:	80 93 69 00 	sts	0x0069, r24
 28e:	90 93 6a 00 	sts	0x006A, r25
 292:	a0 93 6b 00 	sts	0x006B, r26
 296:	b0 93 6c 00 	sts	0x006C, r27
	return;
}
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <USART_Init>:

void USART_Init() {
	UBRRL = 0x67;	//set baud rate
 2b4:	87 e6       	ldi	r24, 0x67	; 103
 2b6:	89 b9       	out	0x09, r24	; 9
	UCSRC = 0x06;	//configure format
 2b8:	86 e0       	ldi	r24, 0x06	; 6
 2ba:	80 bd       	out	0x20, r24	; 32
	UCSRB = 0x18;	//enable transmitter and receiver
 2bc:	88 e1       	ldi	r24, 0x18	; 24
 2be:	8a b9       	out	0x0a, r24	; 10
 2c0:	08 95       	ret

000002c2 <main>:


int main(void) {
	
	//setup timers
	OCR0 = 160;
 2c2:	80 ea       	ldi	r24, 0xA0	; 160
 2c4:	8c bf       	out	0x3c, r24	; 60
	OCR1A = 1600;
 2c6:	80 e4       	ldi	r24, 0x40	; 64
 2c8:	96 e0       	ldi	r25, 0x06	; 6
 2ca:	9b bd       	out	0x2b, r25	; 43
 2cc:	8a bd       	out	0x2a, r24	; 42
	
	//setup USART
	DDRD = 0x00;
 2ce:	11 ba       	out	0x11, r1	; 17
	DDRD |= (1<<PD0)|(1<<PD1);
 2d0:	81 b3       	in	r24, 0x11	; 17
 2d2:	83 60       	ori	r24, 0x03	; 3
 2d4:	81 bb       	out	0x11, r24	; 17
	USART_Init();
 2d6:	ee df       	rcall	.-36     	; 0x2b4 <USART_Init>
	
	while(1) {
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	50 e0       	ldi	r21, 0x00	; 0
		}
	}
	
	//start launch
	//setup coil-pins
	DDRA = 0xFF;
 2dc:	ff 24       	eor	r15, r15
 2de:	fa 94       	dec	r15
	PORTA = 0x00;
	PORTA |= (1<<PA7);
	
	eeprom_update_word(&eepromVar1, (uint16_t)(time[1]));
 2e0:	c1 e7       	ldi	r28, 0x71	; 113
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
	USART_Init();
	
	while(1) {
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
 2e4:	00 e0       	ldi	r16, 0x00	; 0
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	21 c0       	rjmp	.+66     	; 0x32c <main+0x6a>
		for(int j = 0; j < 4; j++) {
			while(!(UCSRA & (1<<RXC)));
 2ea:	5f 9b       	sbis	0x0b, 7	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <main+0x28>
			time[i] |= (UDR<<(8*j));
 2ee:	8c b1       	in	r24, 0x0c	; 12
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <main+0x38>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <main+0x34>
 2fe:	aa 27       	eor	r26, r26
 300:	97 fd       	sbrc	r25, 7
 302:	a0 95       	com	r26
 304:	ba 2f       	mov	r27, r26
 306:	80 80       	ld	r8, Z
 308:	91 80       	ldd	r9, Z+1	; 0x01
 30a:	a2 80       	ldd	r10, Z+2	; 0x02
 30c:	b3 80       	ldd	r11, Z+3	; 0x03
 30e:	88 29       	or	r24, r8
 310:	99 29       	or	r25, r9
 312:	aa 29       	or	r26, r10
 314:	bb 29       	or	r27, r11
 316:	80 83       	st	Z, r24
 318:	91 83       	std	Z+1, r25	; 0x01
 31a:	a2 83       	std	Z+2, r26	; 0x02
 31c:	b3 83       	std	Z+3, r27	; 0x03
 31e:	28 5f       	subi	r18, 0xF8	; 248
 320:	3f 4f       	sbci	r19, 0xFF	; 255
	
	while(1) {
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
		for(int j = 0; j < 4; j++) {
 322:	20 32       	cpi	r18, 0x20	; 32
 324:	31 05       	cpc	r19, r1
 326:	09 f7       	brne	.-62     	; 0x2ea <main+0x28>
	USART_Init();
	
	while(1) {
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
 328:	4f 5f       	subi	r20, 0xFF	; 255
 32a:	5f 4f       	sbci	r21, 0xFF	; 255
 32c:	43 30       	cpi	r20, 0x03	; 3
 32e:	51 05       	cpc	r21, r1
 330:	54 f4       	brge	.+20     	; 0x346 <main+0x84>
 332:	20 2f       	mov	r18, r16
 334:	31 2f       	mov	r19, r17
		for(int j = 0; j < 4; j++) {
			while(!(UCSRA & (1<<RXC)));
			time[i] |= (UDR<<(8*j));
 336:	fa 01       	movw	r30, r20
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	e3 59       	subi	r30, 0x93	; 147
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	d2 cf       	rjmp	.-92     	; 0x2ea <main+0x28>
		}
	}
	
	//start launch
	//setup coil-pins
	DDRA = 0xFF;
 346:	fa ba       	out	0x1a, r15	; 26
	PORTA = 0x00;
 348:	1b ba       	out	0x1b, r1	; 27
	PORTA |= (1<<PA7);
 34a:	df 9a       	sbi	0x1b, 7	; 27
	
	eeprom_update_word(&eepromVar1, (uint16_t)(time[1]));
 34c:	68 81       	ld	r22, Y
 34e:	79 81       	ldd	r23, Y+1	; 0x01
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	32 d0       	rcall	.+100    	; 0x3ba <__eeupd_word_m8535>
	eeprom_update_word(&eepromVar2, (uint16_t)(time[1]>>16));
 356:	88 81       	ld	r24, Y
 358:	99 81       	ldd	r25, Y+1	; 0x01
 35a:	aa 81       	ldd	r26, Y+2	; 0x02
 35c:	bb 81       	ldd	r27, Y+3	; 0x03
 35e:	bd 01       	movw	r22, r26
 360:	88 27       	eor	r24, r24
 362:	99 27       	eor	r25, r25
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	28 d0       	rcall	.+80     	; 0x3ba <__eeupd_word_m8535>
	USART_Init();
	
	while(1) {
	
	//beginn reception of data
	for(int i = 0; i < 3; i++) {
 36a:	40 2f       	mov	r20, r16
 36c:	51 2f       	mov	r21, r17
		while(!(UCSRA & (1<<UDRE)));
		UDR = (char)(bullet_time>>(8*i));
	}
	bullet_time = 0;*/
	
  }
 36e:	de cf       	rjmp	.-68     	; 0x32c <main+0x6a>

00000370 <__mulsi3>:
 370:	db 01       	movw	r26, r22
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	17 d0       	rcall	.+46     	; 0x3a6 <__muluhisi3>
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	a2 9f       	mul	r26, r18
 37e:	80 0d       	add	r24, r0
 380:	91 1d       	adc	r25, r1
 382:	a3 9f       	mul	r26, r19
 384:	90 0d       	add	r25, r0
 386:	b2 9f       	mul	r27, r18
 388:	90 0d       	add	r25, r0
 38a:	11 24       	eor	r1, r1
 38c:	08 95       	ret

0000038e <__umulhisi3>:
 38e:	a2 9f       	mul	r26, r18
 390:	b0 01       	movw	r22, r0
 392:	b3 9f       	mul	r27, r19
 394:	c0 01       	movw	r24, r0
 396:	a3 9f       	mul	r26, r19
 398:	01 d0       	rcall	.+2      	; 0x39c <__umulhisi3+0xe>
 39a:	b2 9f       	mul	r27, r18
 39c:	70 0d       	add	r23, r0
 39e:	81 1d       	adc	r24, r1
 3a0:	11 24       	eor	r1, r1
 3a2:	91 1d       	adc	r25, r1
 3a4:	08 95       	ret

000003a6 <__muluhisi3>:
 3a6:	f3 df       	rcall	.-26     	; 0x38e <__umulhisi3>
 3a8:	a5 9f       	mul	r26, r21
 3aa:	90 0d       	add	r25, r0
 3ac:	b4 9f       	mul	r27, r20
 3ae:	90 0d       	add	r25, r0
 3b0:	a4 9f       	mul	r26, r20
 3b2:	80 0d       	add	r24, r0
 3b4:	91 1d       	adc	r25, r1
 3b6:	11 24       	eor	r1, r1
 3b8:	08 95       	ret

000003ba <__eeupd_word_m8535>:
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	27 2f       	mov	r18, r23
 3be:	02 d0       	rcall	.+4      	; 0x3c4 <__eeupd_r18_m8535>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <__eeupd_byte_m8535>

000003c2 <__eeupd_byte_m8535>:
 3c2:	26 2f       	mov	r18, r22

000003c4 <__eeupd_r18_m8535>:
 3c4:	e1 99       	sbic	0x1c, 1	; 28
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <__eeupd_r18_m8535>
 3c8:	9f bb       	out	0x1f, r25	; 31
 3ca:	8e bb       	out	0x1e, r24	; 30
 3cc:	e0 9a       	sbi	0x1c, 0	; 28
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	0d b2       	in	r0, 0x1d	; 29
 3d2:	02 16       	cp	r0, r18
 3d4:	31 f0       	breq	.+12     	; 0x3e2 <__eeupd_r18_m8535+0x1e>
 3d6:	2d bb       	out	0x1d, r18	; 29
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	e2 9a       	sbi	0x1c, 2	; 28
 3de:	e1 9a       	sbi	0x1c, 1	; 28
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
